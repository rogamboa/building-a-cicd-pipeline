version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name frontend-stack-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name backend-stack-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: ${MEMSTASH_TOKEN}" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            if(( $SUCCESS==1 ));
            then
              cd backend
              echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" > .env
              echo "TYPEORM_HOST=${TYPEORM_HOST}" >> .env
              echo "TYPEORM_PORT=${TYPEORM_PORT}" >> .env
              echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> .env
              echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> .env
              echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> .env
              echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> .env
              echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> .env
              npm install
              npm run migrations:revert
            fi

  install-ansible-dependencies:
    description: Install dependencies for ansible use in circleci/python image
    steps:
      - run:
          name: Install dependencies
          command: |
            python -m venv ~/venv
            source ~/venv/bin/activate
            python -m pip install ansible

  install-awscli-circleci:
    description: Install aws cli on circleci docker images
    steps:
      - run:
          name: Install awscli
          when: on_fail
          command: |
            sudo curl "${AWSCLI2_FILE_URL}" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install && rm -rf ./aws ./awscliv2.zip

  install-nodejs-circleci:
    description: Install nodejs on circleci/python image
    steps:
      - run:
          name: Install nodejs on circleci/python image
          when: on_fail
          command: |
            curl -fsSL https://deb.nodesource.com/setup_14.x | sudo bash -
            sudo apt-get install -y nodejs

  install-nodejs-amzn:
    description: Install nodejs on amazon awscli docker image
    steps:
      - run:
          name: Install nodejs on amazon awscli docker image
          when: on_fail
          command: |
            curl -sL https://rpm.nodesource.com/setup_14.x |  bash -
            yum install -y nodejs

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: run frontend test
          command: |
            cd frontend
            npm i
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: run backend test
          command: |
            cd backend
            npm i
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan frontend
          command: |
            cd frontend
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan backend
          command: |
            cd backend
            npm i
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags workflowID=${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "backend-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags workflowID=${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "frontend-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
      - run:
          name: Install dependencies for workspace use
          command: |
            yum install tar gzip -y
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: circleci/python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["7d:8e:b2:55:fb:be:78:07:b8:55:64:b3:a2:a2:8f:1a"]
      - attach_workspace:
          at: /tmp/workspace
      - restore_cache:
          keys:
            - ansible-dependencies-${CACHE_VER}
      - install-ansible-dependencies
      - save_cache:
          paths:
            - ~/venv
          key: ansible-dependencies-${CACHE_VER}
      - run:
          name: Configure server
          command: |
            source ~/venv/bin/activate
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i /tmp/workspace/inventory.txt \
              --extra-vars \
                 "ENVIRONMENT=${ENVIRONMENT} \
                  TYPEORM_CONNECTION=${TYPEORM_CONNECTION} \
                  TYPEORM_ENTITIES=${TYPEORM_ENTITIES} \
                  TYPEORM_HOST=${TYPEORM_HOST} \
                  TYPEORM_PORT=${TYPEORM_PORT} \
                  TYPEORM_USERNAME=${TYPEORM_USERNAME} \
                  TYPEORM_PASSWORD=${TYPEORM_PASSWORD} \
                  TYPEORM_DATABASE=${TYPEORM_DATABASE}" \
              .circleci/ansible/configure-server.yml
      - install-awscli-circleci
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:10.19.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" > .env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> .env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> .env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> .env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> .env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> .env
            echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> .env
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> .env
            npm rebuild
            npm i
            npm run migrations | tee ~/migration-output.txt
      - persist_to_workspace:
          root: backend
          paths:
            - .env
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "No migrations are pending" ~/migration-output.txt; then
              FLAG="1"
            elif grep -q "has been executed successfully" ~/migration-output.txt; then
              FLAG="1"
            else
              FLAG="0"
            fi

            curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" --request PUT --data $FLAG https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
      - install-awscli-circleci
      - destroy-environment
      - revert-migrations

  build-frontend-deployment:
    docker:
      - image: cimg/node:10.19.0
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: move .env file to frontend directory
          command: |
            mv /tmp/workspace/.env frontend/.env
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(sed -n "2p" /tmp/workspace/inventory.txt)
            echo "export API_URL=http://${BACKEND_IP}:3030" >> $BASH_ENV
            echo "API_URL=http://${BACKEND_IP}:3030"
      - run:
          name: Build frontend objects
          command: |
              cd frontend
              npm i
              npm rebuild
              npm run build
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist
      - install-awscli-circleci
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies for workspace use
          command: |
            yum install tar gzip -y
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Deploy frontend objects
          command: |
              cd /tmp/workspace/frontend/dist
              aws s3 cp . s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
      - destroy-environment
      - install-nodejs-amzn
      - revert-migrations

  build-backend-deployment:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: move .env file to backend directory
          command: |
            mv /tmp/workspace/.env backend/.env
      - run:
          name: Build backend objects
          command: |
            cd backend
            npm run build
      - persist_to_workspace:
          root: .
          paths:
            - backend
      - install-awscli-circleci
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: circleci/python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["7d:8e:b2:55:fb:be:78:07:b8:55:64:b3:a2:a2:8f:1a"]
      - attach_workspace:
          at: /tmp/workspace
      - restore_cache:
          keys:
            - ansible-dependencies-${CACHE_VER}
      - install-ansible-dependencies
      - save_cache:
          paths:
            - ~/venv
          key: ansible-dependencies-${CACHE_VER}
      - run:
          name: Deploy backend
          command: |
            source ~/venv/bin/activate
            tar -C /tmp/workspace/backend -czvf artifact.tar.gz .
            mkdir -p .circleci/ansible/deploy/files
            mv artifact.tar.gz .circleci/ansible/deploy/files/
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i /tmp/workspace/inventory.txt \
              .circleci/ansible/deploy-backend.yml -vv
      - install-awscli-circleci
      - install-nodejs-circleci
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies for workspace use
          command: |
            yum install tar gzip curl -y
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(sed -n "2p" /tmp/workspace/inventory.txt)
            echo "export API_URL=http://${BACKEND_IP}:3030" >> $BASH_ENV
            echo "API_URL=http://${BACKEND_IP}:3030"
      - run:
          name: Backend smoke test
          command: |
            if curl -s ${API_URL} > /dev/null
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"
            if curl -s ${URL} | grep -q "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment
      - install-nodejs-amzn
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Saved old WorkflowID
          command: |

            OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)

            curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" --request PUT --data ${OldWorkflowID} https://api.memstash.io/values/OldWorkflowID_${CIRCLE_WORKFLOW_ID}

      - run:
          name: Update cloudfront distribution
          command: |

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags workflowID=${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name ${CLOUDFRONT_STACKNAME} \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment
      - install-nodejs-amzn
      - revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |

            OldWorkflowID=$(curl -H "token: ${MEMSTASH_TOKEN}" --request GET https://api.memstash.io/values/OldWorkflowID_${CIRCLE_WORKFLOW_ID})

            STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))

            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name frontend-stack-${OldWorkflowID}
              aws cloudformation delete-stack --stack-name backend-stack-${OldWorkflowID}
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - test-frontend
      - scan-backend:
          requires:
            - test-backend
      - deploy-infrastructure:
          requires:
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
      - build-frontend-deployment:
          requires:
            - run-migrations
      - build-backend-deployment:
          requires:
            - run-migrations
      - deploy-frontend:
          requires:
            - build-frontend-deployment
      - deploy-backend:
          requires:
            - build-backend-deployment
      - smoke-test:
          requires:
            - deploy-backend
            - deploy-frontend
      - cloudfront-update:
          requires:
            - smoke-test
      - cleanup:
          requires:
            - cloudfront-update